# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:46:15+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class V2Object(BaseModel):
    pass


class V2Void(BaseModel):
    pass


class ExpandEnum(Enum):
    All = 'All'
    Stop = 'Stop'
    Route = 'Route'
    Run = 'Run'
    Direction = 'Direction'
    Disruption = 'Disruption'
    VehicleDescriptor = 'VehicleDescriptor'
    VehiclePosition = 'VehiclePosition'
    None_ = 'None'


class V3BulkDeparturesRouteDirectionResponse(BaseModel):
    direction_id: Optional[int] = Field(
        None, description='Direction of travel identifier'
    )
    direction_name: Optional[str] = Field(
        None, description='Name of direction of travel'
    )
    route_id: Optional[str] = Field(None, description='Route identifier')


class V3BulkDeparturesStopResponse(BaseModel):
    stop_id: Optional[int] = Field(None, description='Stop identifier')
    stop_landmark: Optional[str] = Field(
        None, description='Landmark in proximity of stop'
    )
    stop_latitude: Optional[float] = Field(
        None, description='Geographic coordinate of latitude at stop'
    )
    stop_longitude: Optional[float] = Field(
        None, description='Geographic coordinate of longitude at stop'
    )
    stop_name: Optional[str] = Field(None, description='Name of stop')
    stop_suburb: Optional[str] = Field(None, description='suburb of stop')


class RouteDirectionStatus(Enum):
    integer_0 = 0
    integer_1 = 1


class V3Departure(BaseModel):
    at_platform: Optional[bool] = Field(
        None,
        description='Indicates if the metropolitan train service is at the platform at the time of query; returns false for other modes',
    )
    departure_sequence: Optional[int] = Field(
        None,
        description='Chronological sequence for the departures in a run. Order ascendingly by this field to get chronological order (earliest first) of departures with the same run_ref. NOTE, this field is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4',
    )
    direction_id: Optional[int] = Field(
        None, description='Direction of travel identifier'
    )
    disruption_ids: Optional[List[int]] = Field(
        None, description='Disruption information identifier(s)'
    )
    estimated_departure_utc: Optional[datetime] = Field(
        None,
        description='Real-time estimate of departure time and date in ISO 8601 UTC format',
    )
    flags: Optional[str] = Field(
        None,
        description='Flag indicating special condition for run (e.g. RR Reservations Required, GC Guaranteed Connection, DOO Drop Off Only, PUO Pick Up Only, MO Mondays only, TU Tuesdays only, WE Wednesdays only, TH Thursdays only, FR Fridays only, SS School days only; ignore E flag)',
    )
    platform_number: Optional[str] = Field(
        None,
        description='Platform number at stop (metropolitan train only; returns null for other modes)',
    )
    route_id: Optional[int] = Field(None, description='Route identifier')
    run_id: Optional[int] = Field(
        None,
        description='Numeric trip/service run identifier. Defaults to -1 when run identifier is Alphanumeric',
    )
    run_ref: Optional[str] = Field(
        None, description='Alphanumeric trip/service run identifier'
    )
    scheduled_departure_utc: Optional[datetime] = Field(
        None,
        description='Scheduled (i.e. timetabled) departure time and date in ISO 8601 UTC format',
    )
    stop_id: Optional[int] = Field(None, description='Stop identifier')


class V3DeparturesBroadParameters(BaseModel):
    date_utc: Optional[datetime] = Field(
        None,
        description='Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)',
    )
    direction_id: Optional[int] = Field(
        None,
        description='Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}',
    )
    expand: Optional[List[ExpandEnum]] = Field(
        None,
        description='List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.\r\n            Run must be expanded to receive VehiclePosition and VehicleDescriptor information.',
    )
    gtfs: Optional[bool] = Field(
        None,
        description='Indicates that stop_id parameter will accept "GTFS stop_id" data',
    )
    include_cancelled: Optional[bool] = Field(
        None,
        description='Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only',
    )
    include_geopath: Optional[bool] = Field(
        None, description='Indicates if the route geopath should be returned'
    )
    look_backwards: Optional[bool] = Field(
        None,
        description='Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default = false). Requires max_results &gt; 0.',
    )
    max_results: Optional[int] = Field(
        None, description='Maximum number of results returned'
    )
    platform_numbers: Optional[List[int]] = Field(
        None, description='Filter by platform number at stop'
    )


class V3DeparturesSpecificParameters(BaseModel):
    date_utc: Optional[datetime] = Field(
        None,
        description='Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)',
    )
    direction_id: Optional[int] = Field(
        None,
        description='Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}',
    )
    expand: Optional[List[ExpandEnum]] = Field(
        None,
        description='List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.\r\n            Run must be expanded to receive VehiclePosition and VehicleDescriptor information.',
    )
    gtfs: Optional[bool] = Field(
        None,
        description='Indicates that stop_id parameter will accept "GTFS stop_id" data',
    )
    include_cancelled: Optional[bool] = Field(
        None,
        description='Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only',
    )
    include_geopath: Optional[bool] = Field(
        None, description='Indicates if the route geopath should be returned'
    )
    look_backwards: Optional[bool] = Field(
        None,
        description='Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default = false). Requires max_results &gt; 0.',
    )
    max_results: Optional[int] = Field(
        None, description='Maximum number of results returned'
    )


class V3Direction(BaseModel):
    direction_id: Optional[int] = Field(
        None, description='Direction of travel identifier'
    )
    direction_name: Optional[str] = Field(
        None, description='Name of direction of travel'
    )
    route_id: Optional[int] = Field(None, description='Route identifier')
    route_type: Optional[int] = Field(None, description='Transport mode identifier')


class V3DirectionWithDescription(BaseModel):
    direction_id: Optional[int] = Field(
        None, description='Direction of travel identifier'
    )
    direction_name: Optional[str] = Field(
        None, description='Name of direction of travel'
    )
    route_direction_description: Optional[str] = None
    route_id: Optional[int] = Field(None, description='Route identifier')
    route_type: Optional[int] = Field(None, description='Transport mode identifier')


class V3DisruptionDirection(BaseModel):
    direction_id: Optional[int] = Field(
        None, description='Direction of travel identifier'
    )
    direction_name: Optional[str] = Field(
        None, description='Name of direction of travel'
    )
    route_direction_id: Optional[int] = Field(
        None, description='Route and direction of travel combination identifier'
    )
    service_time: Optional[str] = Field(
        None,
        description='Time of service to which disruption applies, in 24 hour clock format (HH:MM:SS) AEDT/AEST; returns null if disruption applies to multiple (or no) services',
    )


class V3DisruptionMode(BaseModel):
    disruption_mode: Optional[int] = Field(
        None, description='Disruption mode identifier'
    )
    disruption_mode_name: Optional[str] = Field(
        None, description='Name of disruption mode'
    )


class V3DisruptionRoute(BaseModel):
    direction: Optional[V3DisruptionDirection] = None
    route_gtfs_id: Optional[str] = Field(
        None, description='GTFS Identifer of the route'
    )
    route_id: Optional[int] = Field(None, description='Route identifier')
    route_name: Optional[str] = Field(None, description='Name of route')
    route_number: Optional[str] = Field(
        None, description='Route number presented to public (i.e. not route_id)'
    )
    route_type: Optional[int] = Field(None, description='Transport mode identifier')


class V3DisruptionStop(BaseModel):
    stop_id: Optional[int] = None
    stop_name: Optional[str] = None


class TransportType(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4


class V3DynamoDbTimetable(BaseModel):
    applicable_local_date: Optional[str] = Field(
        None, description='Formated date string of applicable date'
    )
    exists: Optional[bool] = Field(
        None,
        description='True if the named table has been created in DynamoDB (i.e. at least one departure record has been loaded),\r\n            or false if there are no records for this date and transport type.',
    )
    parser_mapping_version: Optional[str] = Field(
        None, description='Diva Mapping Version used to load Parser into DynamoDB'
    )
    parser_version: Optional[int] = Field(None, description='Parser verison')
    pt_mapping_version: Optional[str] = Field(
        None, description='Diva Mapping Version used to load PT into DynamoDB'
    )
    pt_version: Optional[int] = Field(None, description='PT version')
    table_name: Optional[str] = Field(
        None, description='Name of corresponding table in DynamoDB.'
    )
    transport_type: Optional[TransportType] = Field(
        None,
        description='A.k.a. Transport Mode (e.g. Train, Tram, Bus, V/Line, Nightrider)',
    )


class V3FareEstimateResponse(RootModel[Any]):
    root: Any


class V3Outlet(BaseModel):
    outlet_business: Optional[str] = Field(
        None, description='The business name of the outlet'
    )
    outlet_business_hour_fri: Optional[str] = Field(
        None, description='The business hours on Friday'
    )
    outlet_business_hour_mon: Optional[str] = Field(
        None, description='The business hours on Monday'
    )
    outlet_business_hour_sat: Optional[str] = Field(
        None, description='The business hours on Saturday'
    )
    outlet_business_hour_sun: Optional[str] = Field(
        None, description='The business hours on Sunday'
    )
    outlet_business_hour_thur: Optional[str] = Field(
        None, description='The business hours on Thursday'
    )
    outlet_business_hour_tue: Optional[str] = Field(
        None, description='The business hours on Tuesday'
    )
    outlet_business_hour_wed: Optional[str] = Field(
        None, description='The business hours on Wednesday'
    )
    outlet_latitude: Optional[float] = Field(
        None, description='Geographic coordinate of latitude at outlet'
    )
    outlet_longitude: Optional[float] = Field(
        None, description='Geographic coordinate of longitude at outlet'
    )
    outlet_name: Optional[str] = Field(
        None, description='The location name of the outlet'
    )
    outlet_notes: Optional[str] = Field(
        None,
        description="Any additional notes for the outlet such as 'Buy pre-loaded myki cards only'. May be null/empty.",
    )
    outlet_postcode: Optional[int] = Field(
        None, description='The postcode for the outlet'
    )
    outlet_slid_spid: Optional[str] = Field(None, description='The SLID / SPID')
    outlet_suburb: Optional[str] = Field(
        None, description='The city/municipality the outlet is in'
    )


class V3OutletGeolocation(BaseModel):
    outlet_business: Optional[str] = Field(
        None, description='The business name of the outlet'
    )
    outlet_business_hour_fri: Optional[str] = Field(
        None, description='The business hours on Friday'
    )
    outlet_business_hour_mon: Optional[str] = Field(
        None, description='The business hours on Monday'
    )
    outlet_business_hour_sat: Optional[str] = Field(
        None, description='The business hours on Saturday'
    )
    outlet_business_hour_sun: Optional[str] = Field(
        None, description='The business hours on Sunday'
    )
    outlet_business_hour_thur: Optional[str] = Field(
        None, description='The business hours on Thursday'
    )
    outlet_business_hour_tue: Optional[str] = Field(
        None, description='The business hours on Tuesday'
    )
    outlet_business_hour_wed: Optional[str] = Field(
        None, description='The business hours on Wednesday'
    )
    outlet_distance: Optional[float] = Field(
        None,
        description='Distance of outlet from input location (in metres); returns 0 if no location is input',
    )
    outlet_latitude: Optional[float] = Field(
        None, description='Geographic coordinate of latitude at outlet'
    )
    outlet_longitude: Optional[float] = Field(
        None, description='Geographic coordinate of longitude at outlet'
    )
    outlet_name: Optional[str] = Field(
        None, description='The location name of the outlet'
    )
    outlet_notes: Optional[str] = Field(
        None,
        description="Any additional notes for the outlet such as 'Buy pre-loaded myki cards only'. May be null/empty.",
    )
    outlet_postcode: Optional[int] = Field(
        None, description='The postcode for the outlet'
    )
    outlet_slid_spid: Optional[str] = Field(None, description='The SLID / SPID')
    outlet_suburb: Optional[str] = Field(
        None, description='The city/municipality the outlet is in'
    )


class V3OutletGeolocationParameters(BaseModel):
    max_distance: Optional[float] = Field(
        None,
        description='Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default = 300)',
    )
    max_results: Optional[int] = Field(
        None, description='Maximum number of results returned (default = 30)'
    )


class V3OutletParameters(BaseModel):
    max_results: Optional[int] = Field(
        None, description='Maximum number of results returned (default = 30)'
    )


class V3ResultOutlet(BaseModel):
    outlet_business: Optional[str] = Field(
        None, description='The business name of the outlet'
    )
    outlet_business_hour_fri: Optional[str] = Field(
        None, description='The business hours on Friday'
    )
    outlet_business_hour_mon: Optional[str] = Field(
        None, description='The business hours on Monday'
    )
    outlet_business_hour_sat: Optional[str] = Field(
        None, description='The business hours on Saturday'
    )
    outlet_business_hour_sun: Optional[str] = Field(
        None, description='The business hours on Sunday'
    )
    outlet_business_hour_thur: Optional[str] = Field(
        None, description='The business hours on Thursday'
    )
    outlet_business_hour_tue: Optional[str] = Field(
        None, description='The business hours on Tuesday'
    )
    outlet_business_hour_wed: Optional[str] = Field(
        None, description='The business hours on Wednesday'
    )
    outlet_distance: Optional[float] = Field(
        None,
        description='Distance of outlet from input location (in metres); returns 0 if no location is input',
    )
    outlet_latitude: Optional[float] = Field(
        None, description='Geographic coordinate of latitude at outlet'
    )
    outlet_longitude: Optional[float] = Field(
        None, description='Geographic coordinate of longitude at outlet'
    )
    outlet_name: Optional[str] = Field(
        None, description='The location name of the outlet'
    )
    outlet_notes: Optional[str] = Field(
        None,
        description="Any additional notes for the outlet such as 'Buy pre-loaded myki cards only'. May be null/empty.",
    )
    outlet_postcode: Optional[int] = Field(
        None, description='The postcode for the outlet'
    )
    outlet_slid_spid: Optional[str] = Field(None, description='The SLID / SPID')
    outlet_suburb: Optional[str] = Field(
        None, description='The city/municipality the outlet is in'
    )


class V3RouteDeparturesSpecificParameters(BaseModel):
    date_utc: Optional[datetime] = Field(
        None,
        description='Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)',
    )
    expand: Optional[List[ExpandEnum]] = Field(
        None,
        description='List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.\r\n            Run must be expanded to receive VehiclePosition and VehicleDescriptor information.',
    )
    include_cancelled: Optional[bool] = Field(
        None,
        description='Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only',
    )
    include_geopath: Optional[bool] = Field(
        None, description='Indicates if the route geopath should be returned'
    )
    look_backwards: Optional[bool] = Field(
        None,
        description='Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default = false). Requires max_results &gt; 0.',
    )
    max_results: Optional[int] = Field(
        None, description='Maximum number of results returned'
    )
    scheduled_timetables: Optional[bool] = Field(
        None,
        description='When set to true, all timetable information returned by Chronos will be sourced from the scheduled timetables,\r\n            while when set to false (default state), the operational timetables will be used where available.',
    )
    train_scheduled_timetables: Optional[bool] = Field(
        None, description='DEPRECATED - use `scheduled_timetables` instead'
    )


class V3RouteServiceStatus(BaseModel):
    description: Optional[str] = None
    timestamp: Optional[datetime] = None


class V3RouteType(BaseModel):
    route_type: Optional[int] = Field(None, description='Transport mode identifier')
    route_type_name: Optional[str] = Field(None, description='Name of transport mode')


class RouteType(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4


class V3SearchParameters(BaseModel):
    include_addresses: Optional[bool] = Field(
        None, description='Placeholder for future development; currently unavailable'
    )
    include_outlets: Optional[bool] = Field(
        None,
        description='Indicates if outlets will be returned in response (default = true)',
    )
    latitude: Optional[float] = Field(
        None, description='Filter by geographic coordinate of latitude'
    )
    longitude: Optional[float] = Field(
        None, description='Filter by geographic coordinate of longitude'
    )
    match_route_by_suburb: Optional[bool] = Field(
        None,
        description='Indicates whether to find routes by suburbs in the search term (default = true)',
    )
    match_stop_by_gtfs_stop_id: Optional[bool] = Field(
        None,
        description='Indicates whether to search for stops according to a metlink stop ID (default = false)',
    )
    match_stop_by_suburb: Optional[bool] = Field(
        None,
        description='Indicates whether to find stops by suburbs in the search term (default = true)',
    )
    max_distance: Optional[float] = Field(
        None,
        description='Filter by maximum distance (in metres) from location specified via latitude and longitude parameters',
    )
    route_types: Optional[List[RouteType]] = Field(
        None,
        description='Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)',
    )


class MessageType(Enum):
    integer_0 = 0
    integer_1 = 1


class SiriFormat(Enum):
    integer_0 = 0
    integer_1 = 1


class V3SiriDownstreamSubscriptionDeleteRequest(BaseModel):
    subscriber_ref: str = Field(..., description='Siri Subscriber Ref')
    subscription_ref: Optional[List[str]] = Field(
        None,
        description='Siri Subscription Reference(s) - Unique to a Subscriber Ref.\r\n            If `null`, then all subscriptions will be terminated for the referenced Subscriber.',
    )


class V3SiriDownstreamSubscriptionResponse(BaseModel):
    valid_until: Optional[datetime] = Field(
        None, description='The Data Horizon of Chronos'
    )


class DirectionRef(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_5 = 5
    integer_10 = 10
    integer_16 = 16
    integer_32 = 32
    integer_65 = 65
    integer_130 = 130


class V3SiriDownstreamSubscriptionTopic(BaseModel):
    direction_ref: Optional[DirectionRef] = None
    line_ref: Optional[str] = None
    route_type: Optional[RouteType] = None


class V3SiriLineRef(BaseModel):
    direction_ref: Optional[DirectionRef] = Field(
        None,
        description='Siri DirectionRef  (in, out, up, down, clockwise, counterclockwise, Inbound, Outbound)',
    )
    line_ref: str = Field(..., description='Siri LineRef')


class V3SiriLineRefDirectionRefStopPointRef(BaseModel):
    direction_ref: DirectionRef = Field(
        ...,
        description='Siri DirectionRef  (in, out, up, down, clockwise, counterclockwise, Inbound, Outbound)',
    )
    line_ref: str = Field(..., description='Siri LineRef')
    stop_point_ref: int = Field(..., description='Siri StopPointRef')


class V3SiriLineRefsRequest(BaseModel):
    line_refs: Optional[List[V3SiriLineRef]] = None
    mapping_version: str = Field(
        ...,
        description='DIVA mapping version generated by Chronos during a Parser or RealtimeBusConfig load',
    )


class V3SiriReferenceDataDetail(BaseModel):
    direction_id: Optional[int] = None
    route_id: Optional[int] = None
    route_number_short: Optional[str] = Field(None, description='Route number')
    route_type: Optional[int] = None
    tracking_supplier_id: Optional[int] = Field(
        None, description='Authority (Upstream SIRI provider) of a route and direction'
    )


class V3SiriReferenceDataRequest(BaseModel):
    date_utc: Optional[datetime] = Field(
        None,
        description='Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)',
    )
    line_refs: List[V3SiriLineRefDirectionRefStopPointRef]
    mapping_version: str = Field(
        ...,
        description='DIVA mapping version generated by Chronos during a Parser or RealtimeBusConfig load',
    )
    stop_point_refs: Optional[List[int]] = Field(None, description='Siri StopPointRef')


class V3SiriStopsRefsDictionary(BaseModel):
    stop_point_refs: Optional[Dict[str, V3SiriReferenceDataDetail]] = None
    unmatched_stop_point_refs: Optional[Dict[str, str]] = None


class V3SiriSubscriptionTopic(BaseModel):
    direction_ref: Optional[DirectionRef] = Field(
        None,
        description='Siri DirectionRef  (in, out, up, down, clockwise, counterclockwise, Inbound, Outbound)',
    )
    line_ref: str = Field(..., description='Siri LineRef')
    route_type: RouteType = Field(
        ...,
        description='Route Type eg. 0 (Train) 1 (Tram) 2 (Bus) 3 (Vline) 4 (NightRider)',
    )


class Health(Enum):
    integer_0 = 0
    integer_1 = 1


class V3Status(BaseModel):
    health: Optional[Health] = Field(
        None, description='API system health status (0=offline, 1=online)'
    )
    version: Optional[str] = Field(None, description='API Version number')


class V3StopAccessibilityWheelchair(BaseModel):
    accessible_ramp: Optional[bool] = None
    low_ticket_counter: Optional[bool] = Field(
        None,
        description='Indicates if there is at least one low ticket counter at the stop that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)',
    )
    manouvering: Optional[bool] = Field(
        None,
        description='Indicates if there is a space for mobility device to board on or off a transport mode',
    )
    parking: Optional[bool] = Field(
        None,
        description='Indicates if there is at least one accessible parking spot at the stop that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)',
    )
    raised_platform: Optional[bool] = Field(
        None, description='Indicates if there is a raised platform to board a train'
    )
    raised_platform_shelther: Optional[bool] = Field(
        None, description='Indicates if there is shelter near the raised platform'
    )
    ramp: Optional[bool] = Field(
        None, description='Indicates if there are ramps (&lt;1:14) at the stop/platform'
    )
    secondary_path: Optional[bool] = Field(
        None,
        description='Indicates if there is a path beyond the stop which is accessible',
    )
    steep_ramp: Optional[bool] = Field(
        None, description='Indicates if there are ramps (&gt;1:14) at the stop/platform'
    )
    telephone: Optional[bool] = Field(
        None,
        description='Indicates if there is at least one accessible telephone at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)',
    )
    toilet: Optional[bool] = Field(
        None,
        description='Indicates if there is at least one accessible toilet at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)',
    )


class V3StopAmenityDetails(BaseModel):
    car_parking: Optional[str] = Field(
        None, description='The number of free car parking spots at the stop'
    )
    cctv: Optional[bool] = Field(
        None,
        description='Indicates if there are CCTV (i.e. closed circuit television) cameras at the stop',
    )
    taxi_rank: Optional[bool] = Field(
        None, description='Indicates if there is a taxi rank at or near the stop'
    )
    toilet: Optional[bool] = Field(
        None, description='Indicates if there is a public toilet at or near the stop'
    )


class V3StopBasic(BaseModel):
    stop_id: Optional[int] = None
    stop_name: Optional[str] = None


class V3StopDepartureRequestRouteDirection(BaseModel):
    direction_id: Optional[conint(ge=0, le=2147483647)] = Field(
        None,
        description='Direction of travel identifier; values returned by Directions API - v3/directions',
    )
    direction_name: str = Field(
        ...,
        description='Name of direction of travel; values returned by Directions API - v3/directions',
    )
    route_id: Optional[str] = Field(
        None,
        description='Identifier of route; values returned by Routes API - v3/routes',
    )


class V3StopGeosearch(BaseModel):
    disruption_ids: Optional[List[int]] = Field(
        None, description='Disruption information identifier(s)'
    )
    route_type: Optional[int] = Field(None, description='Transport mode identifier')
    routes: Optional[List[V2Object]] = Field(
        None, description='List of routes travelling through the stop'
    )
    stop_distance: Optional[float] = Field(
        None,
        description='Distance of stop from input location (in metres); returns 0 if no location is input',
    )
    stop_id: Optional[int] = Field(None, description='Stop identifier')
    stop_landmark: Optional[str] = Field(
        None, description='Landmark in proximity of stop'
    )
    stop_latitude: Optional[float] = Field(
        None, description='Geographic coordinate of latitude at stop'
    )
    stop_longitude: Optional[float] = Field(
        None, description='Geographic coordinate of longitude at stop'
    )
    stop_name: Optional[str] = Field(None, description='Name of stop')
    stop_sequence: Optional[int] = Field(
        None,
        description='Sequence of the stop on the route/run; return 0 when route_id or run_id not specified. Order ascendingly by this field (when non zero) to get physical order (earliest first) of stops on the route_id/run_id.',
    )
    stop_suburb: Optional[str] = Field(None, description='suburb of stop')


class V3StopGps(BaseModel):
    latitude: Optional[float] = Field(
        None, description='Geographic coordinate of latitude at stop'
    )
    longitude: Optional[float] = Field(
        None, description='Geographic coordinate of longitude at stop'
    )


class V3StopLocation(BaseModel):
    gps: Optional[V3StopGps] = None


class V3StopModel(BaseModel):
    route_type: Optional[int] = Field(None, description='Transport mode identifier')
    stop_distance: Optional[float] = Field(
        None,
        description='Distance of stop from input location (in metres); returns 0 if no location is input',
    )
    stop_id: Optional[int] = Field(None, description='Stop identifier')
    stop_landmark: Optional[str] = Field(
        None, description='Landmark in proximity of stop'
    )
    stop_latitude: Optional[float] = Field(
        None, description='Geographic coordinate of latitude at stop'
    )
    stop_longitude: Optional[float] = Field(
        None, description='Geographic coordinate of longitude at stop'
    )
    stop_name: Optional[str] = Field(None, description='Name of stop')
    stop_sequence: Optional[int] = Field(
        None,
        description='Sequence of the stop on the route/run; return 0 when route_id or run_id not specified. Order ascendingly by this field (when non zero) to get physical order (earliest first) of stops on the route_id/run_id.',
    )
    stop_suburb: Optional[str] = Field(None, description='suburb of stop')


class V3StopPoint(BaseModel):
    stop_id: Optional[int] = None


class V3StopStaffing(BaseModel):
    fri_am_from: Optional[str] = Field(None, description='Stop staffing hours')
    fri_am_to: Optional[str] = Field(None, description='Stop staffing hours')
    fri_pm_from: Optional[str] = Field(None, description='Stop staffing hours')
    fri_pm_to: Optional[str] = Field(None, description='Stop staffing hours')
    mon_am_from: Optional[str] = Field(None, description='Stop staffing hours')
    mon_am_to: Optional[str] = Field(None, description='Stop staffing hours')
    mon_pm_from: Optional[str] = Field(None, description='Stop staffing hours')
    mon_pm_to: Optional[str] = Field(None, description='Stop staffing hours')
    ph_additional_text: Optional[str] = Field(None, description='Stop staffing hours')
    ph_from: Optional[str] = Field(None, description='Stop staffing hours')
    ph_to: Optional[str] = Field(None, description='Stop staffing hours')
    sat_am_from: Optional[str] = Field(None, description='Stop staffing hours')
    sat_am_to: Optional[str] = Field(None, description='Stop staffing hours')
    sat_pm_from: Optional[str] = Field(None, description='Stop staffing hours')
    sat_pm_to: Optional[str] = Field(None, description='Stop staffing hours')
    sun_am_from: Optional[str] = Field(None, description='Stop staffing hours')
    sun_am_to: Optional[str] = Field(None, description='Stop staffing hours')
    sun_pm_from: Optional[str] = Field(None, description='Stop staffing hours')
    sun_pm_to: Optional[str] = Field(None, description='Stop staffing hours')
    thu_am_from: Optional[str] = Field(None, description='Stop staffing hours')
    thu_am_to: Optional[str] = Field(None, description='Stop staffing hours')
    thu_pm_from: Optional[str] = Field(None, description='Stop staffing hours')
    thu_pm_to: Optional[str] = Field(None, description='Stop staffing hours')
    tue_am_from: Optional[str] = Field(None, description='Stop staffing hours')
    tue_am_to: Optional[str] = Field(None, description='Stop staffing hours')
    tue_pm_from: Optional[str] = Field(None, description='Stop staffing hours')
    tue_pm_to: Optional[str] = Field(None, description='Stop staffing hours')
    wed_am_from: Optional[str] = Field(None, description='Stop staffing hours')
    wed_am_to: Optional[str] = Field(None, description='Stop staffing hours')
    wed_pm_To: Optional[str] = Field(None, description='Stop staffing hours')
    wed_pm_from: Optional[str] = Field(None, description='Stop staffing hours')


class V3StopTicket(BaseModel):
    is_free_fare_zone: Optional[bool] = Field(
        None, description='Indicates whether the stop is inside the free fare zone'
    )
    ticket_checks: Optional[bool] = None
    ticket_machine: Optional[bool] = None
    ticket_type: Optional[str] = Field(
        None, description='Indicates the ticket type for the stop (myki, paper or both)'
    )
    ticket_zones: Optional[List[int]] = None
    vline_reservation: Optional[bool] = None
    zone: Optional[str] = Field(None, description='Description of the zone')


class V3StoppingPatternStop(BaseModel):
    route_type: Optional[int] = Field(None, description='Transport mode identifier')
    stop_distance: Optional[float] = Field(
        None,
        description='Distance of stop from input location (in metres); returns 0 if no location is input',
    )
    stop_id: Optional[int] = Field(None, description='Stop identifier')
    stop_landmark: Optional[str] = Field(
        None, description='Landmark in proximity of stop'
    )
    stop_latitude: Optional[float] = Field(
        None, description='Geographic coordinate of latitude at stop'
    )
    stop_longitude: Optional[float] = Field(
        None, description='Geographic coordinate of longitude at stop'
    )
    stop_name: Optional[str] = Field(None, description='Name of stop')
    stop_sequence: Optional[int] = Field(
        None,
        description='Sequence of the stop on the route/run; return 0 when route_id or run_id not specified. Order ascendingly by this field (when non zero) to get physical order (earliest first) of stops on the route_id/run_id.',
    )
    stop_suburb: Optional[str] = Field(None, description='suburb of stop')
    stop_ticket: Optional[V3StopTicket] = None


class V3VehicleDescriptor(BaseModel):
    air_conditioned: Optional[bool] = Field(
        None,
        description='Indicator if vehicle is air conditioned. May be null. Only available for some tram runs.',
    )
    description: Optional[str] = Field(
        None,
        description='Vehicle description such as "6 Car Comeng", "6 Car Xtrapolis", "3 Car Comeng", "6 Car Siemens", "3 Car Siemens". May be null/empty.\r\n            Only available for some metropolitan train runs.',
    )
    id: Optional[str] = Field(
        None,
        description='Operator identifier of the vehicle such as "26094". May be null/empty. Only available for some tram and bus runs.',
    )
    length: Optional[str] = Field(
        None, description='The length of the vehicle. Applies to CIS - Metro Trains'
    )
    low_floor: Optional[bool] = Field(
        None,
        description='Indicator if vehicle has a low floor. May be null. Only available for some tram runs.',
    )
    operator: Optional[str] = Field(
        None,
        description='Operator name of the vehicle such as "Metro Trains Melbourne", "Yarra Trams", "Ventura Bus Line", "CDC" or "Sita Bus Lines" . May be null/empty.\r\n            Only available for train, tram, v/line and some bus runs.',
    )
    supplier: Optional[str] = Field(
        None, description='Supplier of vehicle descriptor data.'
    )


class V3VehiclePosition(BaseModel):
    bearing: Optional[float] = Field(
        None,
        description='Compass bearing of the vehicle when known, clockwise from True North, i.e., 0 is North and 90 is East. May be null.\r\n            Only available for some bus runs.',
    )
    datetime_utc: Optional[datetime] = Field(
        None, description='Date and time that the vehicle position data was supplied.'
    )
    direction: Optional[str] = Field(
        None, description='CIS - Metro Train Vehicle Location Direction'
    )
    easting: Optional[float] = Field(
        None, description='CIS - Metro Train Vehicle Location Easting coordinate'
    )
    expiry_time: Optional[datetime] = Field(
        None, description='CIS - Metro Train Vehicle Location data expiry time'
    )
    latitude: Optional[float] = Field(
        None,
        description='Geographic coordinate of latitude of the vehicle when known. May be null.\r\n            Only available for some bus runs.',
    )
    longitude: Optional[float] = Field(
        None,
        description='Geographic coordinate of longitude of the vehicle when known. \r\n            Only available for some bus runs.',
    )
    northing: Optional[float] = Field(
        None, description='CIS - Metro Train Vehicle Location Northing coordinate'
    )
    supplier: Optional[str] = Field(
        None, description='Supplier of vehicle position data.'
    )


class PlatformNumbers(RootModel[List[int]]):
    root: List[int]


class Expand(RootModel[List[ExpandEnum]]):
    root: List[ExpandEnum]


class Expand1(RootModel[List[ExpandEnum]]):
    root: List[ExpandEnum]


class DisruptionMode(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_7 = 7
    integer_8 = 8
    integer_9 = 9
    integer_10 = 10
    integer_11 = 11
    integer_12 = 12
    integer_13 = 13
    integer_14 = 14
    integer_100 = 100


class DisruptionStatus(Enum):
    current = 'current'
    planned = 'planned'


class RouteTypes(RootModel[List[RouteType]]):
    root: List[RouteType]


class DisruptionModes(RootModel[List[DisruptionMode]]):
    root: List[DisruptionMode]


class TravelledRouteType(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4


class TravelledRouteTypes(RootModel[List[TravelledRouteType]]):
    root: List[TravelledRouteType]


class Expand2(RootModel[List[ExpandEnum]]):
    root: List[ExpandEnum]


class RouteTypes1(RootModel[List[RouteType]]):
    root: List[RouteType]


class ExpandEnum10(Enum):
    All = 'All'
    VehicleDescriptor = 'VehicleDescriptor'
    VehiclePosition = 'VehiclePosition'
    None_ = 'None'


class Expand3(RootModel[List[ExpandEnum10]]):
    root: List[ExpandEnum10]


class Expand4(RootModel[List[ExpandEnum10]]):
    root: List[ExpandEnum10]


class Expand5(RootModel[List[ExpandEnum10]]):
    root: List[ExpandEnum10]


class Expand6(RootModel[List[ExpandEnum10]]):
    root: List[ExpandEnum10]


class RouteTypes2(RootModel[List[RouteType]]):
    root: List[RouteType]


class RouteTypes3(RootModel[List[RouteType]]):
    root: List[RouteType]


class V3BulkDeparturesUpdateResponse(BaseModel):
    departures: Optional[List[V3Departure]] = Field(
        None, description='Timetabled and real-time service departures'
    )
    requested_route_direction: Optional[V3BulkDeparturesRouteDirectionResponse] = None
    route_direction: Optional[V3BulkDeparturesRouteDirectionResponse] = None
    route_direction_status: Optional[RouteDirectionStatus] = Field(
        None,
        description='The status of the route direction (changed | unchanged).\r\n            If changed, requests should change the requested_route_direction for the route_direction supplied.',
    )
    route_type: Optional[int] = Field(None, description='Transport mode identifier')
    stop_id: Optional[int] = Field(None, description='Stop identifier')


class V3DirectionsResponse(BaseModel):
    directions: Optional[List[V3DirectionWithDescription]] = Field(
        None, description='Directions of travel of route'
    )
    status: Optional[V3Status] = None


class V3Disruption(BaseModel):
    colour: Optional[str] = None
    description: Optional[str] = Field(
        None, description='Description of the disruption'
    )
    display_on_board: Optional[bool] = None
    display_status: Optional[bool] = None
    disruption_id: Optional[int] = Field(
        None, description='Disruption information identifier'
    )
    disruption_status: Optional[str] = Field(
        None, description='Status of the disruption (e.g. "Planned", "Current")'
    )
    disruption_type: Optional[str] = Field(None, description='Type of disruption')
    from_date: Optional[datetime] = Field(
        None,
        description='Date and time at which disruption begins, in ISO 8601 UTC format',
    )
    last_updated: Optional[datetime] = Field(
        None,
        description='Date and time disruption information was last updated by PTV, in ISO 8601 UTC format',
    )
    published_on: Optional[datetime] = Field(
        None,
        description='Date and time disruption information is published on PTV website, in ISO 8601 UTC format',
    )
    routes: Optional[List[V3DisruptionRoute]] = Field(
        None, description='Route relevant to a disruption (if applicable)'
    )
    stops: Optional[List[V3DisruptionStop]] = Field(
        None, description='Stop relevant to a disruption (if applicable)'
    )
    title: Optional[str] = Field(
        None, description='Headline title summarising disruption information'
    )
    to_date: Optional[datetime] = Field(
        None,
        description='Date and time at which disruption ends, in ISO 8601 UTC format (returns null if unknown)',
    )
    url: Optional[str] = Field(
        None, description='URL of relevant article on PTV website'
    )


class V3DisruptionModesResponse(BaseModel):
    disruption_modes: Optional[List[V3DisruptionMode]] = Field(
        None, description='Transport mode identifiers'
    )
    status: Optional[V3Status] = None


class V3DisruptionResponse(BaseModel):
    disruption: Optional[V3Disruption] = None
    status: Optional[V3Status] = None


class V3Disruptions(BaseModel):
    ferry: Optional[List[V3Disruption]] = Field(
        None, description='Subset of disruption information applicable to ferry'
    )
    general: Optional[List[V3Disruption]] = Field(
        None,
        description='Subset of disruption information applicable to multiple route_types',
    )
    interstate_train: Optional[List[V3Disruption]] = Field(
        None,
        description='Subset of disruption information applicable to interstate train',
    )
    metro_bus: Optional[List[V3Disruption]] = Field(
        None,
        description='Subset of disruption information applicable to metropolitan bus',
    )
    metro_train: Optional[List[V3Disruption]] = Field(
        None,
        description='Subset of disruption information applicable to metropolitan train',
    )
    metro_tram: Optional[List[V3Disruption]] = Field(
        None,
        description='Subset of disruption information applicable to metropolitan tram',
    )
    night_bus: Optional[List[V3Disruption]] = Field(
        None, description='Subset of disruption information applicable to night bus'
    )
    regional_bus: Optional[List[V3Disruption]] = Field(
        None, description='Subset of disruption information applicable to regional bus'
    )
    regional_coach: Optional[List[V3Disruption]] = Field(
        None, description='Subset of disruption information applicable to V/Line coach'
    )
    regional_train: Optional[List[V3Disruption]] = Field(
        None, description='Subset of disruption information applicable to V/Line train'
    )
    school_bus: Optional[List[V3Disruption]] = Field(
        None, description='Subset of disruption information applicable to school bus'
    )
    skybus: Optional[List[V3Disruption]] = Field(
        None, description='Subset of disruption information applicable to skybus'
    )
    taxi: Optional[List[V3Disruption]] = Field(
        None, description='Subset of disruption information applicable to taxi'
    )
    telebus: Optional[List[V3Disruption]] = Field(
        None,
        description='Subset of disruption information applicable to telebus services',
    )


class V3DisruptionsResponse(BaseModel):
    disruptions: Optional[V3Disruptions] = None
    status: Optional[V3Status] = None


class V3DynamoDbTimetablesReponse(BaseModel):
    status: Optional[V3Status] = None
    timetables: Optional[List[V3DynamoDbTimetable]] = None


class V3ErrorResponse(BaseModel):
    message: Optional[str] = Field(None, description='Error message')
    status: Optional[V3Status] = None


class V3GenerateDivaMappingResponse(BaseModel):
    mapping_version: Optional[str] = None
    status: Optional[V3Status] = None


class V3OutletGeolocationResponse(BaseModel):
    outlets: Optional[List[V3OutletGeolocation]] = Field(
        None, description='myki ticket outlets'
    )
    status: Optional[V3Status] = None


class V3OutletResponse(BaseModel):
    outlets: Optional[List[V3Outlet]] = Field(None, description='myki ticket outlets')
    status: Optional[V3Status] = None


class V3PatternDeparture(BaseModel):
    at_platform: Optional[bool] = Field(
        None,
        description='Indicates if the metropolitan train service is at the platform at the time of query; returns false for other modes',
    )
    departure_sequence: Optional[int] = Field(
        None,
        description='Chronological sequence for the departures in a run. Order ascendingly by this field to get chronological order (earliest first) of departures with the same run_ref. NOTE, this field is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4',
    )
    direction_id: Optional[int] = Field(
        None, description='Direction of travel identifier'
    )
    disruption_ids: Optional[List[int]] = Field(
        None, description='Disruption information identifier(s)'
    )
    estimated_departure_utc: Optional[datetime] = Field(
        None,
        description='Real-time estimate of departure time and date in ISO 8601 UTC format',
    )
    flags: Optional[str] = Field(
        None,
        description='Flag indicating special condition for run (e.g. RR Reservations Required, GC Guaranteed Connection, DOO Drop Off Only, PUO Pick Up Only, MO Mondays only, TU Tuesdays only, WE Wednesdays only, TH Thursdays only, FR Fridays only, SS School days only; ignore E flag)',
    )
    platform_number: Optional[str] = Field(
        None,
        description='Platform number at stop (metropolitan train only; returns null for other modes)',
    )
    route_id: Optional[int] = Field(None, description='Route identifier')
    run_id: Optional[int] = Field(
        None,
        description='Numeric trip/service run identifier. Defaults to -1 when run identifier is Alphanumeric',
    )
    run_ref: Optional[str] = Field(
        None, description='Alphanumeric trip/service run identifier'
    )
    scheduled_departure_utc: Optional[datetime] = Field(
        None,
        description='Scheduled (i.e. timetabled) departure time and date in ISO 8601 UTC format',
    )
    skipped_stops: Optional[List[V3StopModel]] = Field(
        None,
        description='The stops to be skipped following the current departure in order.',
    )
    stop_id: Optional[int] = Field(None, description='Stop identifier')


class V3ResultRoute(BaseModel):
    route_gtfs_id: Optional[str] = Field(
        None, description='GTFS Identifer of the route'
    )
    route_id: Optional[int] = Field(None, description='Route identifier')
    route_name: Optional[str] = Field(None, description='Name of route')
    route_number: Optional[str] = Field(
        None, description='Route number presented to public (nb. not route_id)'
    )
    route_service_status: Optional[V3RouteServiceStatus] = None
    route_type: Optional[int] = Field(None, description='Transport mode identifier')


class V3ResultStop(BaseModel):
    route_type: Optional[int] = Field(None, description='Transport mode identifier')
    routes: Optional[List[V3ResultRoute]] = Field(
        None, description='List of routes travelling through the stop'
    )
    stop_distance: Optional[float] = Field(
        None,
        description='Distance of stop from input location (in metres); returns 0 if no location is input',
    )
    stop_id: Optional[int] = Field(None, description='Stop identifier')
    stop_landmark: Optional[str] = Field(
        None, description='Landmark in proximity of stop'
    )
    stop_latitude: Optional[float] = Field(
        None, description='Geographic coordinate of latitude at stop'
    )
    stop_longitude: Optional[float] = Field(
        None, description='Geographic coordinate of longitude at stop'
    )
    stop_name: Optional[str] = Field(None, description='Name of stop')
    stop_sequence: Optional[int] = Field(
        None,
        description='Sequence of the stop on the route/run; return 0 when route_id or run_id not specified. Order ascendingly by this field (when non zero) to get physical order (earliest first) of stops on the route_id/run_id.',
    )
    stop_suburb: Optional[str] = Field(None, description='suburb of stop')


class V3RouteResponse(BaseModel):
    route: Optional[V2Object] = None
    status: Optional[V3Status] = None


class V3RouteTypesResponse(BaseModel):
    route_types: Optional[List[V3RouteType]] = Field(
        None, description='Transport mode identifiers'
    )
    status: Optional[V3Status] = None


class V3Run(BaseModel):
    destination_name: Optional[str] = Field(
        None, description='Name of destination of run'
    )
    direction_id: Optional[int] = Field(
        None, description='Direction of travel identifier'
    )
    express_stop_count: Optional[int] = Field(
        None,
        description='The number of remaining skipped/express stations for the run/service from a stop',
    )
    final_stop_id: Optional[int] = Field(
        None, description='stop_id of final stop of run'
    )
    geopath: Optional[List[V2Object]] = Field(None, description='Geopath of the route')
    route_id: Optional[int] = Field(None, description='Route identifier')
    route_type: Optional[int] = Field(None, description='Transport mode identifier')
    run_id: Optional[int] = Field(
        None,
        description='Numeric trip/service run identifier. Defaults to -1 when run identifier is Alphanumeric',
    )
    run_ref: Optional[str] = Field(
        None, description='Alphanumeric trip/service run identifier'
    )
    run_sequence: Optional[int] = Field(
        None,
        description='Chronological sequence of the trip/service run on the route in direction. Order ascendingly by this field to get chronological order (earliest first) of runs with the same route_id and direction_id.',
    )
    status: Optional[str] = Field(
        None,
        description='Status of metropolitan train run; returns "scheduled" for other modes',
    )
    vehicle_descriptor: Optional[V3VehicleDescriptor] = None
    vehicle_position: Optional[V3VehiclePosition] = None


class V3RunResponse(BaseModel):
    run: Optional[V3Run] = None
    status: Optional[V3Status] = None


class V3RunsResponse(BaseModel):
    runs: Optional[List[V3Run]] = Field(
        None, description='Individual trips/services of a route'
    )
    status: Optional[V3Status] = None


class V3SearchResult(BaseModel):
    outlets: Optional[List[V3ResultOutlet]] = Field(
        None, description='myki ticket outlets'
    )
    routes: Optional[List[V3ResultRoute]] = Field(
        None,
        description='Train lines, tram routes, bus routes, regional coach routes, Night Bus routes',
    )
    status: Optional[V3Status] = None
    stops: Optional[List[V3ResultStop]] = Field(
        None,
        description='Train stations, tram stops, bus stops, regional coach stops or Night Bus stops',
    )


class V3SiriDirectionRefsDictionary(BaseModel):
    direction_refs: Optional[Dict[str, V3SiriStopsRefsDictionary]] = None


class V3SiriDownstreamSubscription(BaseModel):
    consumer_address: Optional[str] = None
    initial_termination_time: Optional[datetime] = None
    message_type: Optional[MessageType] = None
    preview_interval: Optional[str] = None
    siri_format: Optional[SiriFormat] = None
    siri_version: Optional[constr(pattern=r'1.3|2.0')] = None
    subscriber_ref: Optional[str] = None
    subscription_ref: Optional[str] = None
    topics: Optional[List[V3SiriDownstreamSubscriptionTopic]] = None
    validity_period_end: Optional[datetime] = None
    validity_period_start: Optional[datetime] = None


class V3SiriEstimatedTimetableSubscriptionRequest(BaseModel):
    consumer_address: str = Field(
        ...,
        description='Siri Consumer Address - Baseline and Updates will be sent to this address',
    )
    initial_termination_time: datetime = Field(
        ..., description='Siri Initial Termination Time - Expiry of the subscription'
    )
    preview_interval: str = Field(..., description='Siri Preview Interval')
    siri_format: SiriFormat = Field(
        ..., description="Siri Message Format 'xml' or 'json'"
    )
    siri_version: constr(pattern=r'1.3|2.0') = Field(
        ..., description="Siri Message Version '1.3' or '2.0'"
    )
    subscriber_ref: str = Field(..., description='Siri Subscriber Ref')
    subscription_ref: str = Field(
        ..., description='Siri Subscription Ref - Unique to a Subscriber Ref'
    )
    topics: List[V3SiriSubscriptionTopic]


class V3SiriLineRefDirectionRefsDictionary(BaseModel):
    direction_refs: Optional[Dict[str, List[V3SiriReferenceDataDetail]]] = None
    unmatched_direction_refs: Optional[Dict[str, str]] = None


class V3SiriLineRefMappingsResponse(BaseModel):
    line_refs: Optional[Dict[str, V3SiriLineRefDirectionRefsDictionary]] = None
    mapping_version: Optional[str] = None
    status: Optional[V3Status] = None


class V3SiriProductionTimetableSubscriptionRequest(BaseModel):
    consumer_address: str = Field(
        ...,
        description='Siri Consumer Address - Baseline and Updates will be sent to this address',
    )
    end_time: datetime = Field(..., description='Siri End Time of the Validity Period')
    initial_termination_time: datetime = Field(
        ..., description='Siri Initial Termination Time - Expiry of the subscription'
    )
    siri_format: SiriFormat = Field(
        ..., description="Siri Message Format 'xml' or 'json'"
    )
    siri_version: constr(pattern=r'1.3|2.0') = Field(
        ..., description="Siri Message Version '1.3' or '2.0'"
    )
    start_time: datetime = Field(
        ..., description='Siri Start Time of the Validity Period'
    )
    subscriber_ref: str = Field(..., description='Siri Subscriber Ref')
    subscription_ref: str = Field(
        ..., description='Siri Subscription Ref - Unique to a Subscriber Ref'
    )
    topics: List[V3SiriSubscriptionTopic]


class V3SiriReferenceDataMappingsResponse(BaseModel):
    line_refs: Optional[Dict[str, V3SiriDirectionRefsDictionary]] = Field(
        None, description='SIRI LineRef'
    )
    mapping_version: Optional[str] = None
    status: Optional[V3Status] = None
    stop_point_refs: Optional[Dict[str, V3StopPoint]] = None


class V3StopAccessibility(BaseModel):
    audio_customer_information: Optional[bool] = Field(
        None,
        description='Indicates if there is at least one audio customer information at the stop/platform',
    )
    escalator: Optional[bool] = Field(
        None,
        description='Indicates if there is at least one accessible escalator at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)',
    )
    hearing_loop: Optional[bool] = Field(
        None,
        description='Indicates if there is a hearing loop facility at the stop/platform',
    )
    lift: Optional[bool] = Field(
        None, description='Indicates if there is an elevator at the stop/platform'
    )
    lighting: Optional[bool] = Field(
        None, description='Indicates if there is lighting at the stop'
    )
    platform_number: Optional[int] = Field(
        None,
        description='Indicates the platform number for xivic information (Platform 0 indicates general stop facilities)',
    )
    stairs: Optional[bool] = Field(
        None, description='Indicates if there are stairs available in the stop'
    )
    stop_accessible: Optional[bool] = Field(
        None, description='Indicates if the stop is accessible'
    )
    tactile_ground_surface_indicator: Optional[bool] = Field(
        None,
        description='Indicates if there are tactile tiles (also known as tactile ground surface indicators, or TGSIs) at the stop',
    )
    waiting_room: Optional[bool] = Field(
        None, description='Indicates if there is a general waiting area at the stop'
    )
    wheelchair: Optional[V3StopAccessibilityWheelchair] = None


class V3StopDepartureRequest(BaseModel):
    gtfs: Optional[bool] = Field(
        None,
        description='Indicates that stop_id parameter will accept "GTFS stop_id" data and route_directions[x].route_id parameters will accept route_gtfs_id data',
    )
    max_results: Optional[conint(ge=0, le=2147483647)] = Field(
        None, description='Maximum number of results returned'
    )
    route_directions: List[V3StopDepartureRequestRouteDirection] = Field(
        ..., description='The route directions to find departures for at this stop.'
    )
    route_type: Optional[RouteType] = Field(
        None,
        description='Number identifying transport mode; values returned via RouteTypes API',
    )
    stop_id: Optional[conint(ge=0, le=2147483647)] = Field(
        None, description='Identifier of stop; values returned by Stops API'
    )


class V3StopDetails(BaseModel):
    disruption_ids: Optional[List[int]] = Field(
        None, description='Disruption information identifier(s)'
    )
    route_type: Optional[int] = Field(None, description='Transport mode identifier')
    routes: Optional[List[V2Object]] = Field(
        None, description='Routes travelling through the stop'
    )
    station_description: Optional[str] = Field(
        None,
        description='The definition applicable to the station_type; returns null for V/Line train',
    )
    station_type: Optional[str] = Field(
        None,
        description='Type of metropolitan train station (i.e. "Premium", "Host" or "Unstaffed" station); returns null for V/Line train',
    )
    stop_accessibility: Optional[V3StopAccessibility] = None
    stop_amenities: Optional[V3StopAmenityDetails] = None
    stop_id: Optional[int] = Field(None, description='Stop identifier')
    stop_landmark: Optional[str] = Field(
        None, description='Landmark in proximity of stop'
    )
    stop_location: Optional[V3StopLocation] = None
    stop_name: Optional[str] = Field(None, description='Name of stop')
    stop_staffing: Optional[V3StopStaffing] = None


class V3StopOnRoute(BaseModel):
    disruption_ids: Optional[List[int]] = Field(
        None, description='Disruption information identifier(s)'
    )
    route_type: Optional[int] = Field(None, description='Transport mode identifier')
    stop_id: Optional[int] = Field(None, description='Stop identifier')
    stop_landmark: Optional[str] = Field(
        None, description='Landmark in proximity of stop'
    )
    stop_latitude: Optional[float] = Field(
        None, description='Geographic coordinate of latitude at stop'
    )
    stop_longitude: Optional[float] = Field(
        None, description='Geographic coordinate of longitude at stop'
    )
    stop_name: Optional[str] = Field(None, description='Name of stop')
    stop_sequence: Optional[int] = Field(
        None,
        description='Sequence of the stop on the route/run; return 0 when route_id or run_id not specified. Order ascendingly by this field (when non zero) to get physical order (earliest first) of stops on the route_id/run_id.',
    )
    stop_suburb: Optional[str] = Field(None, description='suburb of stop')
    stop_ticket: Optional[V3StopTicket] = None


class V3StopResponse(BaseModel):
    disruptions: Optional[Dict[str, V3Disruption]] = Field(
        None,
        description='Disruption information applicable to relevant routes or stops',
    )
    status: Optional[V3Status] = None
    stop: Optional[V3StopDetails] = None


class V3StoppingPattern(BaseModel):
    departures: Optional[List[V3PatternDeparture]] = Field(
        None, description='Timetabled and real-time service departures'
    )
    directions: Optional[Dict[str, V3Direction]] = Field(
        None, description='Directions of travel of route'
    )
    disruptions: Optional[List[V3Disruption]] = Field(
        None,
        description='Disruption information applicable to relevant routes or stops',
    )
    routes: Optional[Dict[str, V2Object]] = Field(
        None,
        description='Train lines, tram routes, bus routes, regional coach routes, Night Bus routes',
    )
    runs: Optional[Dict[str, V3Run]] = Field(
        None, description='Individual trips/services of a route'
    )
    status: Optional[V3Status] = None
    stops: Optional[Dict[str, V3StoppingPatternStop]] = Field(
        None,
        description='A train station, tram stop, bus stop, regional coach stop or Night Bus stop',
    )


class V3StopsByDistanceResponse(BaseModel):
    disruptions: Optional[Dict[str, V3Disruption]] = Field(
        None,
        description='Disruption information applicable to relevant routes or stops',
    )
    status: Optional[V3Status] = None
    stops: Optional[List[V3StopGeosearch]] = Field(
        None,
        description='Train stations, tram stops, bus stops, regional coach stops or Night Bus stops',
    )


class V3StopsOnRouteResponse(BaseModel):
    disruptions: Optional[Dict[str, V3Disruption]] = Field(
        None,
        description='Disruption information applicable to relevant routes or stops',
    )
    geopath: Optional[List[V2Object]] = Field(None, description='GeoPath for the route')
    status: Optional[V3Status] = None
    stops: Optional[List[V3StopOnRoute]] = Field(
        None,
        description='Train stations, tram stops, bus stops, regional coach stops or Night Bus stops',
    )


class V3BulkDeparturesRequest(BaseModel):
    date_utc: Optional[datetime] = Field(
        None,
        description='Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)',
    )
    expand: Optional[List[ExpandEnum]] = Field(
        None,
        description='List objects to be returned in full (i.e. expanded) - options include: all, stop, route, run, direction, disruption, none',
    )
    include_cancelled: Optional[bool] = Field(
        None,
        description='Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only',
    )
    include_geopath: Optional[bool] = Field(
        None, description='Indicates if the route geopath should be returned'
    )
    look_backwards: Optional[bool] = Field(
        None,
        description='Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default = false). Requires max_results &gt; 0.',
    )
    requests: List[V3StopDepartureRequest] = Field(
        ..., description='Collection of departure requests'
    )


class V3BulkDeparturesResponse(BaseModel):
    directions: Optional[List[V3Direction]] = Field(
        None, description='Directions of travel of route'
    )
    disruptions: Optional[Dict[str, V3Disruption]] = Field(
        None,
        description='Disruption information applicable to relevant routes or stops',
    )
    responses: Optional[List[V3BulkDeparturesUpdateResponse]] = Field(
        None,
        description='Contains departures for the requested stop and route(s). It includes details as to the route_direction and whether it is still valid.',
    )
    routes: Optional[List[V2Object]] = Field(
        None,
        description='Train lines, tram routes, bus routes, regional coach routes, Night Bus routes',
    )
    runs: Optional[List[V3Run]] = Field(
        None, description='Individual trips/services of a route'
    )
    status: Optional[V3Status] = None
    stops: Optional[Dict[str, V3BulkDeparturesStopResponse]] = Field(
        None,
        description='A train station, tram stop, bus stop, regional coach stop or Night Bus stop',
    )


class V3DeparturesResponse(BaseModel):
    departures: Optional[List[V3Departure]] = Field(
        None, description='Timetabled and real-time service departures'
    )
    directions: Optional[Dict[str, V3Direction]] = Field(
        None, description='Directions of travel of route'
    )
    disruptions: Optional[Dict[str, V3Disruption]] = Field(
        None,
        description='Disruption information applicable to relevant routes or stops',
    )
    routes: Optional[Dict[str, V2Object]] = Field(
        None,
        description='Train lines, tram routes, bus routes, regional coach routes, Night Bus routes',
    )
    runs: Optional[Dict[str, V3Run]] = Field(
        None, description='Individual trips/services of a route'
    )
    status: Optional[V3Status] = None
    stops: Optional[Dict[str, V3StopModel]] = Field(
        None,
        description='A train station, tram stop, bus stop, regional coach stop or Night Bus stop',
    )
